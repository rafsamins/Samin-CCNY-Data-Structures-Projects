// NAME: Samin Chowdhury
// FILE: bag6.template
// -------------------------------------------------------------------------
// This is a partial implementation of the bag template class from Section
// 10.5 of "Data Structures and Other Objects Using C++". The parts marked
// with ***STUDENT WORK*** are left as a project for data structures
// students. Some additional discussion of this project is available at
// http://www.cs.colorado.edu/~main/projects/chap10a.html
// -------------------------------------------------------------------------
// TEMPLATE CLASS IMPLEMENTED: bag<Item> (see bag6.h for documentation)
// INVARIANT of the ADT:
//   root_ptr is the root pointer of a binary search tree that contains the
//   bag's items.
// INVARIANT of the Bag
// 	1. The items in the bag are stored in a binary search tree. 
// 	2. The root pointer of the binary search tree is stored in the member variable
// 		root_ptr (which may be NULL for an empty tree)

#include <cassert>
#include <cstdlib>

namespace main_savitch_10
{
	// BST_REMOVE_MAX FUNCTION IMPLEMENTATION //
    template <class Item> void bst_remove_max(binary_tree_node<Item>*& root_ptr, Item& removed)
	// Precondition: root_ptr is a root pointer of a non-empty binary 
	// search tree.
	// Postcondition: The largest item in the binary search tree has been
	// removed, and root_ptr now points to the root of the new (smaller) 
	// binary search tree. The reference parameter, removed, has been set 
	// to a copy of the removed item.
	{
	    /***STUDENT WORK***
	     ** This recursive function should be implemented by the student, as
	     ** discussed on page 507 of the second edition of the textbook.
	     ** The base case occurs when there is no right child of the
	     ** root_ptr node. In this case, the root_ptr should be moved down
	     ** to its left child and then the original root node must be
	     ** deleted. There is also a recursive case, when the root does
	     ** have a right child. In this case, a recursive call can be made
	     ** using root_ptr->right( ) as the first parameter. Please notice
	     ** in bintree.h, the return value from root_ptr->right( ) has been
	     ** changed from the first printing of the book. The new version of
	     ** the right() function has the prototype:
	     **    binary_tree_node<Item>*&
	     ** The & symbol in the return type means that the return value is
	     ** a reference to the actual right pointer in the node. Any changes
	     ** made to this pointer in the recursive call will directly change
	     ** the right pointer in the root_ptr's node.
	     */
	}

			 
		if (root_ptr == NULL)
			return;
		else if (root_ptr->right()==NULL)
		{
			removed = root_ptr->data();
			binary_tree_node<Item>* removed_ptr = root_ptr;
			root_ptr = root_ptr->left();
			delete removed_ptr;
		}
			else bst_remove_max(root_ptr->right(),removed);
	}



	// BST_REMOVE FUNCTION IMPLEMENTATION //
    template <class Item>	bool bst_remove(binary_tree_node<Item>*& root_ptr, const Item& target)
	// Precondition: root_ptr is a root pointer of a binary search tree 
	// or may be NULL for an empty tree).
	// Postcondition: If target was in the tree, then one copy of target
	// has been removed, and root_ptr now points to the root of the new 
	// (smaller) binary search tree. In this case the function returns true.
	// If target was not in the tree, then the tree is unchanged (and the
	// function returns false).
	{
	    binary_tree_node<Item> *oldroot_ptr;
	    
	    if (root_ptr == NULL)
	    {   // Empty tree
					return false;
	    }

	    if (target < root_ptr->data( ))
	    {   // Continue looking in the left subtree
			// Note: Any change made to root_ptr->left by this recursive
			// call will change the actual left pointer (because the return
			// value from the left() member function is a reference to the
			// actual left pointer.
			return bst_remove(root_ptr->left( ), target);
	    }

	    if (target > root_ptr->data( ))
	    {   // Continue looking in the right subtree
			// Note: Any change made to root_ptr->right by this recursive
			// call will change the actual right pointer (because the return
			// value from the right() member function is a reference to the
			// actual right pointer.
			return bst_remove(root_ptr->right( ), target);
	    }
	    
	    if (root_ptr->left( ) == NULL)
	    {   // Target was found and there is no left subtree, so we can
			// remove this node, making the right child be the new root.
			oldroot_ptr = root_ptr;
			root_ptr = root_ptr->right( );
			delete oldroot_ptr;
			return true;
	    }
	    
	    // If code reaches this point, then we must remove the target from
	    // the current node. We'll actually replace this target with the
	    // maximum item in our left subtree.
	    // Note: Any change made to root_ptr->left by bst_remove_max
	    // will change the actual left pointer (because the return
	    // value from the left() member function is a reference to the
	    // actual left pointer.
	    bst_remove_max(root_ptr->left( ), root_ptr->data( ));
	    return true;
	}
// The last function that had to be implemented was the remove function. This function removes
// one instance of a certain target number and NOT ALL. It makes a pointer called oldrootptr to
// hold the node that will be removed. Checks if the tree is empty and if it is, the function returns
// false because there is no node to remove.
// ...
// If target is less than the data in the current node, the function - searches for the target in the left 
// subtree by calling bst_remove on the left child of root_ptr. It returns the result 
// ...
// If target is greater than the data in the current node, the function recursively searches for the target 
// in the right subtree by calling bst_remove on the right child of root_ptr. It returns the result 
// ...
// If the current node has no left child it means the target is found and the node to be removed only has a 
// right child . the function updates root_ptr to point to the right child, deletes the old node, and returns true
// ...
// If the current node has a left child, the function must replace the target with the maximum value from the left 
// subtree. It does this by calling bst_remove_max to find and remove the maximum value from the left subtree. 
// After replacing the current node’s data with this maximum value, the function returns true




	// BST_REMOVE_ALL FUNCTION IMPLEMENTATION //	
    template <class Item> typename bag<Item>::size_type bst_remove_all(binary_tree_node<Item>*& root_ptr, const Item& target)
	// Precondition: root_ptr is a root pointer of a binary search tree 
	// or may be NULL for an empty tree).
	// Postcondition: All copies of target have been removed from the tree,
	// and root_ptr now points to the root of the new 
	// (smaller) binary search tree. The return value tells how many copies
	// of the target were removed.
	{
	    /** STUDENT WORK
	     ** Note: This implementation is similar to bst_remove, except that
	     ** all occurrences of the target must be removed, and the return
	     ** value is the number of copies that were removed.
	     */
	    
	    binary_tree_node<Item> *oldroot_ptr;
	    
	    if (root_ptr == NULL)
	    {   // Empty tree
	        /* STUDENT WORK */
			return 0;
	    }

	    if (target < root_ptr->data( ))
	    {   // Continue looking in the left subtree
	        /* STUDENT WORK */
			return bst_remove_all(root_ptr->left(), target);
	    }

	    if (target > root_ptr->data( ))
	    {   // Continue looking in the right subtree
	        /* STUDENT WORK */
			return bst_remove_all(root_ptr->right(), target);
	    }
	    
	    if (root_ptr->left( ) == NULL)
	    {   // Target was found and there is no left subtree, so we can
			// remove this node, making the right child be the new root.
			oldroot_ptr = root_ptr;
			root_ptr = root_ptr->right( );
			delete oldroot_ptr;
			return 1;
	    }
	    
	    // If code reaches this point, then we must remove the target from
	    // the current node. We'll actually replace this target with the
	    // maximum item in our left subtree. We then continue
	    // searching for more copies of the target to remove.
	    // This continued search must start at the current root (since
	    // the maximum element that we moved up from our left subtree
	    // might also be a copy of the target).
	    /* STUDENT WORK */
			
			bst_remove_max(root_ptr->left(),root_ptr->data());
			return 1 + bst_remove_all(root_ptr, target);
	}
// bst_remove_all was the third function that we had to implement according to the word document
// provided. It returns a size_type, which represents the number of occurrences of target that were
// removed. The function operates on a binary search tree whose root is root_ptr, which is passed by 
// reference so it can be modified.
// ...
// oldrootptr is a pointer that can temporarily hold the old root node when needed. if the root pointer
// is empty, then there is nothing to remove so we return 0. 
// ...
// If target is less than the data in the current root node, the function searches for target in the left 
// by recursively calling bst_remove_all on the left child of the current root. It returns the result
// ...
// If target is greater than the data in the current root node, the function searches for target in the right 
// by recursively calling bst_remove_all on the right child of the current root. It returns the result 
// ...
// If root_ptr has no left child it means the current node contains target and has no left subtree. The function
// removes this node by updating root_ptr to its right child, deleting the old node, and returns 1 to indicate that
// one occurrence of target was removed.
// ...
// If none of the previous conditions were met this means target is present at the current root node and there is 
// a left subtree. To remove this node, the function will replace the current node’s data with the maximum value 
// from the left.  After replacing the current node’s data, the function recursively continues to remove all occurrences
// of target from the updated tree. The function returns 1.



	// CONSTRUCTOR IMPLEMENTATION //
    template <class Item>bag<Item>::bag(const bag<Item>& source)
	// Library facilities used: bintree.h
	{
	    root_ptr = tree_copy(source.root_ptr);
	}



	// DESTRUCTOR IMPLEMENTATION //
    template <class Item> bag<Item>::~bag( )
	// Header file used: bintree.h
	{
	    tree_clear(root_ptr);
	}



	// SIZE FUNCTION IMPLEMENTATION //
    template <class Item>	typename bag<Item>::size_type bag<Item>::size( ) const
	// Header file used: bintree.h
	{
	    return tree_size(root_ptr);
	}



	// INSERT FUNCTION IMPLEMENTATION //
    template <class Item>	void bag<Item>::insert(const Item& entry)
	// Header file used: bintree.h
	{
	    binary_tree_node<Item> *cursor;
	
	    if (root_ptr == NULL)
	    {   // Add the first node of the binary search tree:
					root_ptr = new binary_tree_node<Item>(entry);
					return;
	    }

	    else
	    {   // Move down the tree and add a new leaf:
					cursor = root_ptr;
		/* STUDENT WORK */

		
				while(true)
			{
				if(cursor->data() >= entry)
					if(cursor->left() == NULL)
					{
						binary_tree_node<Item> *new_left = new binary_tree_node<Item>(entry); 
						cursor->set_left(new_left);
						break;
					}
					else
						cursor=cursor->left();
				else
				{
					if(cursor->right()==NULL)
					{
						binary_tree_node<Item> *new_right = new binary_tree_node<Item>(entry); 
						cursor->set_right(new_right);
						break;
					}
					else
						cursor=cursor->right();
				}
			}
	    }
	}
// Insert was the first function that had to be implemented according to the word document provided. 
// Insert inserts a new item into the BST and it can handle different data types. A cursor of type
// binarytreenode <Item> is declared and this is used to traverse the tree. The first if else is very
// simple. If the rootptr is NULL aka empty, then we make a new node with entry as its data and then set
// it to the root. And if its not empty, we add a leaf aka the roots children. 
// ...
// Now the while loop is inside the else statement. 
// If the current nodes data is >= than the entry, it checks if the left child is NULL. If its NULL, it 
// makes a new node. If the left child is not null, the cursor points to the left child. 
// ...
// If the current nodes data is <= than the entry, it checks if the right child is NULL. If its null, it
// makes a new node. If the right child is not null, the cursor points to the right child. 
// ... 
// The function checks if the tree is empty and inserts the first node if it is.
// If the tree is not empty, it uses a cursor to traverse the tree to find location for the new node.
// Depending on whether the new entry is less than or equal to the current node's data, it moves left 
// or right, inserting the new node at the appropriate leaf position.





	// COUNT FUNCTION IMPLEMENTATION //
    template <class Item>	typename bag<Item>::size_type bag<Item>::count(const Item& target) const
	{
	    size_type occurrences = 0;
	    binary_tree_node<Item> *cursor;

	    cursor = root_ptr;
	    /* STUDENT WORK */

			
		while(cursor)
		{
			if(cursor->data()==target)
			{
				occurrences++;
				cursor=cursor->left();
			}
			else if(cursor->data() > target)
				cursor = cursor->left();
			else
				cursor=cursor->right();
		}
	    return occurrences;
	}
// Count is the second member function that had to be implemented according to the word document provided. 
// Count returns size_type used to represent the number of items in the bag. But it is counting a certain
// item in the bag, that is why in the parameter it is (const Item & target). 
// ...
// size_type occurrences = 0 initializes a variable called occurrences to count the occurences of a target  
// item and then we create a pointer cursor used to traverse the BST. 
// ...
// now the cursor starts at the root pointer. the while loop starts a loop that continues as long as the
// cursor is not null. if the cursor points to a node and the data matches the target, it increments the
// occurrences variable. and then it goes to left bc values less than the current node are in the left. 
// ... 
// if the cursor points to a node and the data is greater than the target, the cursor will now move to 
// the left
// ...
// if the cursor points to a node and the data is less than the target, the cursor will move to the right
// of the BST



	// ERASE FUNCTION IMPLEMENTATION //
    template <class Item>	typename bag<Item>::size_type bag<Item>::erase(const Item& target)
	{
	    return bst_remove_all(root_ptr, target);
	}



	// ERASE ONE FUNCTION IMPLEMENTATION //
    template <class Item>	bool bag<Item>::erase_one(const Item& target)
	{
	    return bst_remove(root_ptr, target);
	}



	// OPERATOR= IMPLEMENTATION //
    template <class Item> void bag<Item>::operator =(const bag<Item>& source)
        // Header file used: bintree.h
        {
	    if (root_ptr == source.root_ptr)
	        return;
	    tree_clear(root_ptr);
	    root_ptr = tree_copy(source.root_ptr);
	}



	// OPERATOR+= IMPLEMENTATION //
    template <class Item>	void bag<Item>::operator +=(const bag<Item>& addend)
        {
	    if (root_ptr == addend.root_ptr)
	    {
		bag<Item> copy = addend;
		insert_all(copy.root_ptr);
	    }
	    else
	        insert_all(addend.root_ptr);
	}



	// OPERATOR+ IMPLEMENTATION //
    template <class Item>	bag<Item> operator +(const bag<Item>& b1, const bag<Item>& b2)
	{
	    bag<Item> occurrences = b1;
	    occurrences += b2;
	    return occurrences;
	}



	// INSERT_ALL IMPLEMENTATION // 
    template <class Item> void bag<Item>::insert_all(binary_tree_node<Item>* addroot_ptr)
        // Precondition: addroot_ptr is the root pointer of a binary search tree that
        // is separate for the binary search tree of the bag that activated this
        // method.
        // Postcondition: All the items from the addroot_ptr's binary search tree
        // have been added to the binary search tree of the bag that activated this
        // method.
	{
	    if (addroot_ptr != NULL)
	    {
		insert(addroot_ptr->data( ));
		insert_all(addroot_ptr->left( ));
		insert_all(addroot_ptr->right( ));
	    }
	}
}


// NOTES: //
// The default constructor sets the root pointer to NULL. The copy
// constructor needs to make a new copy of the source’s tree, and point root_ptr
// to the root of this copy. The destructor needs to return all nodes to the heap

// Since our bag uses dynamic memory, we must overload the assignment operator. 
// The assignment operator works like the copy constructor with two preliminary steps:
// (1) First check for the possibility of a self-assignment by comparing (this == &source). 
// If these two pointers are equal, then we have a self-assignment. In this case, the function
// returns with no further work.
